//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.concinnity.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:396)
import java.io.Serializable;                                                    // Always required - (GenUtility.java:224)
import java.util.*;                                                             // Always required if we have any MV attributes - (GenUtility.java:221)
import org.dmd.concinnity.shared.generated.dmo.ConceptDMO;                      // Type specific set/add - (GenUtility.java:307)
import org.dmd.concinnity.shared.generated.dmo.ConcinnityDefinitionDMO;         // Base class - (GenUtility.java:355)
import org.dmd.concinnity.shared.generated.types.ConceptREF;                    // Helper class - (GenUtility.java:335)
import org.dmd.concinnity.shared.generated.types.DmcTypeConceptREFMV;           // Reference type - (GenUtility.java:300)
import org.dmd.concinnity.shared.generated.types.DmcTypeConceptREFSV;           // Reference type - (GenUtility.java:300)
import org.dmd.dmc.DmcAttribute;                                                // Named object - (GenUtility.java:376)
import org.dmd.dmc.DmcNamedObjectIF;                                            // Named object - (GenUtility.java:375)
import org.dmd.dmc.DmcOmni;                                                     // Lazy resolution - (GenUtility.java:320)
import org.dmd.dmc.DmcSliceInfo;                                                // Required for object slicing - (GenUtility.java:229)
import org.dmd.dmc.DmcValueException;                                           // Any attributes - (GenUtility.java:241)
import org.dmd.dmc.types.DefinitionName;                                        // Naming attribute type - (GenUtility.java:370)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                     // Required for MODREC constructor - (GenUtility.java:228)
import org.dmd.dms.generated.types.DmcTypeDefinitionNameSV;                     // Required type - (GenUtility.java:328)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                           // Required for MODREC constructor - (GenUtility.java:227)

// Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:677)
/**
 * The Concept class provides a flexible mechanism for defining concepts that
 * can be\n linked in arbitrary or structured ways to other concepts.
 * Concepts allow other, disparate information\n from other dark-matter
 * Domain Specific Languages (DSLs) to be linked together at a conceptual
 * level.\n <p/>\n How you use this mechanism is bounded only by your
 * imagination.
 * <P>
 * Generated from the dmconcinnity schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class ConceptDMO  extends ConcinnityDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "Concept";


    static {
    }

    public ConceptDMO() {
        super("Concept");
    }

    protected ConceptDMO(String oc) {
        super(oc);
    }

    @Override
    public ConceptDMO getNew(){
        ConceptDMO rc = new ConceptDMO();
        return(rc);
    }

    @Override
    public ConceptDMO getSlice(DmcSliceInfo info){
        ConceptDMO rc = new ConceptDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public ConceptDMO(DmcTypeModifierMV mods) {
        super("Concept");
        modrec(true);
        setModifier(mods);
    }

    public ConceptDMO getModificationRecorder(){
        ConceptDMO rc = new ConceptDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:751)
    public DefinitionName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((DefinitionName)name.getSV());
    
        return(null);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:768)
    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:775)
    public boolean equals(Object obj){
        if (obj instanceof ConceptDMO){
            return( getObjectName().equals( ((ConceptDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:783)
    public int hashCode(){
        DefinitionName objn = getObjectName();
        if (objn == null)
            return(0);
        
        return(objn.hashCode());
    }

    /**
     * @return An Iterator of ConceptDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:970)
    public Iterator<ConceptREF> getIsA(){
        DmcTypeConceptREFMV attr = (DmcTypeConceptREFMV) get(DmconcinnityDMSAG.__isA);
        if (attr == null)
            return( ((List<ConceptREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<ConceptREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of ConceptREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:990)
    public Iterator<ConceptREF> getIsAREFs(){
        DmcTypeConceptREFMV attr = (DmcTypeConceptREFMV) get(DmconcinnityDMSAG.__isA);
        if (attr == null)
            return( ((List<ConceptREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another isA to the specified value.
     * @param value Concept
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1004)
    public DmcAttribute<?> addIsA(ConceptDMO value) {
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__isA);
        if (attr == null)
            attr = new DmcTypeConceptREFMV(DmconcinnityDMSAG.__isA);
        
        try{
            setLastValue(attr.add(value));
            add(DmconcinnityDMSAG.__isA,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another isA value.
     * @param value A value compatible with Concept
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1245)
    public DmcAttribute<?> addIsA(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__isA);
        if (attr == null)
            attr = new DmcTypeConceptREFMV(DmconcinnityDMSAG.__isA);
        
        setLastValue(attr.add(value));
        add(DmconcinnityDMSAG.__isA,attr);
        return(attr);
    }

    /**
     * Returns the number of values in isA
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1262)
    public int getIsASize(){
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__isA);
        if (attr == null){
            if (DmconcinnityDMSAG.__isA.indexSize == 0)
                return(0);
            else
                return(DmconcinnityDMSAG.__isA.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a isA value.
     * @param value The Concept to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1301)
    public DmcAttribute<?> delIsA(Object value){
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__isA);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeConceptREFMV(DmconcinnityDMSAG.__isA), value);
        else
            attr = del(DmconcinnityDMSAG.__isA, value);
        
        return(attr);
    }

    /**
     * Removes the isA attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1355)
    public void remIsA(){
         rem(DmconcinnityDMSAG.__isA);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:655)
    public ConceptREF getDerivedFrom(){
        DmcTypeConceptREFSV attr = (DmcTypeConceptREFSV) get(DmconcinnityDMSAG.__derivedFrom);
        if (attr == null)
            return(null);

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return(null);
            }
        }

        return(attr.getSV());
    }

    /**
     * Returns the reference to Concept without attempting lazy resolution (if turned on).
     */
    public ConceptREF getDerivedFromREF(){
        DmcTypeConceptREFSV attr = (DmcTypeConceptREFSV) get(DmconcinnityDMSAG.__derivedFrom);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets derivedFrom to the specified value.
     * @param value ConceptDMO
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:709)
    public void setDerivedFrom(ConceptDMO value) {
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__derivedFrom);
        if (attr == null)
            attr = new DmcTypeConceptREFSV(DmconcinnityDMSAG.__derivedFrom);
        else
            ((DmcTypeConceptREFSV)attr).removeBackReferences();
        
        try{
            attr.set(value);
            set(DmconcinnityDMSAG.__derivedFrom,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets derivedFrom to the specified value.
     * @param value A value compatible with DmcTypeConceptREFSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setDerivedFrom(Object value) throws DmcValueException {
        DmcTypeConceptREFSV attr  = (DmcTypeConceptREFSV) get(DmconcinnityDMSAG.__derivedFrom);
        if (attr == null)
            attr = new DmcTypeConceptREFSV(DmconcinnityDMSAG.__derivedFrom);
        else
            attr.removeBackReferences();
        
        attr.set(value);
        set(DmconcinnityDMSAG.__derivedFrom,attr);
    }

    /**
     * Removes the derivedFrom attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remDerivedFrom(){
         rem(DmconcinnityDMSAG.__derivedFrom);
    }

    /**
     * @return An Iterator of ConceptDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:970)
    public Iterator<ConceptREF> getRelatedTo(){
        DmcTypeConceptREFMV attr = (DmcTypeConceptREFMV) get(DmconcinnityDMSAG.__relatedTo);
        if (attr == null)
            return( ((List<ConceptREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<ConceptREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of ConceptREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:990)
    public Iterator<ConceptREF> getRelatedToREFs(){
        DmcTypeConceptREFMV attr = (DmcTypeConceptREFMV) get(DmconcinnityDMSAG.__relatedTo);
        if (attr == null)
            return( ((List<ConceptREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another relatedTo to the specified value.
     * @param value Concept
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1004)
    public DmcAttribute<?> addRelatedTo(ConceptDMO value) {
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__relatedTo);
        if (attr == null)
            attr = new DmcTypeConceptREFMV(DmconcinnityDMSAG.__relatedTo);
        
        try{
            setLastValue(attr.add(value));
            add(DmconcinnityDMSAG.__relatedTo,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another relatedTo value.
     * @param value A value compatible with Concept
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1245)
    public DmcAttribute<?> addRelatedTo(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__relatedTo);
        if (attr == null)
            attr = new DmcTypeConceptREFMV(DmconcinnityDMSAG.__relatedTo);
        
        setLastValue(attr.add(value));
        add(DmconcinnityDMSAG.__relatedTo,attr);
        return(attr);
    }

    /**
     * Returns the number of values in relatedTo
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1262)
    public int getRelatedToSize(){
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__relatedTo);
        if (attr == null){
            if (DmconcinnityDMSAG.__relatedTo.indexSize == 0)
                return(0);
            else
                return(DmconcinnityDMSAG.__relatedTo.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a relatedTo value.
     * @param value The Concept to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1301)
    public DmcAttribute<?> delRelatedTo(Object value){
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__relatedTo);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeConceptREFMV(DmconcinnityDMSAG.__relatedTo), value);
        else
            attr = del(DmconcinnityDMSAG.__relatedTo, value);
        
        return(attr);
    }

    /**
     * Removes the relatedTo attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1355)
    public void remRelatedTo(){
         rem(DmconcinnityDMSAG.__relatedTo);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public DefinitionName getName(){
        DmcTypeDefinitionNameSV attr = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setName(DefinitionName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setName(Object value) throws DmcValueException {
        DmcTypeDefinitionNameSV attr  = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remName(){
         rem(MetaDMSAG.__name);
    }




}
